========================================================================
    STATIC LIBRARY : UPELIB Project Overview
========================================================================

  I know - who ever expected to find any real documentation in one of these
Visual Studio generated README files??!??  This time is the exception ...

  UPELIB is a library of shared routines for the LCM's "Universal Peripheral
Emulator" project.  It's used by the DEC MASSBUS Server (MBS), CDC Peripheral
Server (CPS) and Sigma Disk Emulator (SDE) projects plus anything else we might
come up with in the future.  All of these projects use the MESA FPGA PCI board
to interface with the host system.

  Currently UPELIB contains code for seven major functions and several
associated classes that are shared by all these projects.  They are

  1. Console Window control - MBS/CPS/SDE are WIN32 console applications and,
way back in the beginning, they just used fgets() to read commands from the
console and fprintf() to print error messages.  That worked fine for a while,
but then the people wanted to do WIN32 specific things, like set the title of
the console window, change the size, position or colors of the console window
and trap ^C and Windows Shutdown/LogOff events. The CConsoleWindow class
encapsulates the WIN32 console window and provides a simple interface for doing
these things.  The CConsoleWindow class also provides the ability to detach from
the current console window, create a new one, and attach to that.  This ability
is used to implement the "-x", run as a separate process, command line option.

  2. Logging - The CLog class in LogFile.hpp implements a generic logging
facility.  Messages may be logged to the console, to a file, or both depending
on the message severity.  Messages logged to the log file are automatically time
stamped.  Log files may be opened and closed, and the message level for both
console and log file may be changed dynamically.  Finally, message levels are
thread specific and different threads (e.g. different CDC channels or MASSBUS
adapters) may have different message levels.

     Lastly, the logging facility implements an asynchronous logging option via
the CMessageQueue class.  Any thread may set its logging to queued, and messages
generated by that thread are then queued rather than being printed immediately.
A background thread in the CMessageQueue class runs at a lowered priority level
and continuously checks the queue and logs any messages it finds there.  This
removes some of the logging overhead, especially for DEBUG and TRACE messages,
from the time critical threads.

  3. Command Parsing - The classes defined in CommandParser.hpp (and there are
quite a few) implement a simple command line parser.  The application defines
tables of command verbs, arguments and modifier objects and then the CCmdParser
object will parse a line of text according to those definitions.  Arguments and
modifiers supported include numbers, strings, file names, keywords, PCI BDF
addresses, and more.

     A separate class, CCommandLine, provides for parsing the program's argc
and argv[] argument list from the shell.  It's similar the standard getopt()
library routine, but is implemented as an object.

  4. Standard commands - the class CStandardUI contains the definitions for 
several commands that are shared between all implementations (CPS, MBS, SDE
and others).  This includes commands like HELP, DO, EXIT, SET LOG, SHOW LOG,
SET WINDOW and more.  Sharing them like this a) saves work, and als b) ensures
that all implementations have the same syntax and semantics for common commands.

  5. Image File I/O - The header ImageFile.hpp defines a generic CImageFile base
class and derived classes for disk (CDiskImage) and tape (CTapeImage) images. A
CDiskImage represents a fixed length sector, random access, block rewritable
file (i.e. exactly what you'd expect from a disk drive!).  And a CTapeImageFile
is a variable record length, sequential access, non-rewritable (just what you'd
want for a tape drive) file.  Both these classes read and write disk image files
that conform to simh standard formats.

  6. UPE/FPGA Interface - UPE.hpp defines two classes for interfacing with the
MESA FPGA board.  The CUPEs (note the trailing "s"!) is a collection class that
is filled with information about all FPGA boards installed.  A PC may have more
than one FPGA/UPE card installed and this application may talk to more than one
of them, but it doesn't necessarily talk to all of them. Some of the FPGA boards
may be used by other applications.  Generally the user tells the application
which FPGA board to use via some UI command (and conveniently, there are command
parser routines for doing just this!).

    Once the user picks a specific FPGA board, a CUPE object (also defined in
UPE.hpp) is created for just that one.  The CUPE object contains methods for
mapping the shared memory region used to communicate with the FPGA and methods
for handling interrupts from the FPGA.  Although I/O ports are possible, none
are used in any of the LCM's UPE applications. Each application uses a different
layout for the shared memory window, and each application defines its own class
derived from CUPE that implements the specific interface for that host.

    The CBitStream class is also associated with the UPE/FPGA interface.  This
class contains code to encapsulate a standard Xilinx FPGA bitstream (.BIT) file
and it's used by the CUPE class to download the firmware to the MESA board.

  7. TELNET Terminal Server - The CTerminalServer class implements a simple but
complete TELNET server package.  This may be used in conjunction with a host
terminal multiplexer emulation to implement Internet connectivity even for hosts
that are too old to know about TCP/IP networking.  The CTerminalServer class
supports an arbitrary number of connections and properly parses TELNET IAC
("Interpret as Command") escape sequences.  A few of these sequences are even
actually implemented, but all are parsed and refused properly.

  8. Miscellaneous classes -
  CCheckpointFiles - creates a background file checkpoint thread
  CCircularBuffer - simple circular (aka ring) buffer class

Bob Armstrong <bob@jfcl.com>   [14-DEC-2015]
